{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RaBe CloudEvents Specification","text":"<p>The RaBe CloudEvents specification defines the required, <code>URI</code> and <code>URI-reference</code> based, <code>type</code> and <code>source</code> attributes of the CloudEvents specification.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Notations and Terminology</li> <li>Versioning</li> <li>Type System</li> <li>Attribute Naming Convention</li> <li>REQUIRED Attributes</li> <li>Example</li> <li>Event Type Registry</li> </ul>"},{"location":"#overview","title":"Overview","text":"<p>Events occur all over the place and all the time, having a common understanding of how to communicate events allows us to capture them in a meaningful way ensuring they can be leveraged in protocol and implementation agnostic scenarios by a range of consumers and producers across the diverse landscape of the RaBe IT stack.</p> <p>This specification is heavily inspired by the work done by the maintainers of the CloudEvents v1.0.1 Spec.</p>"},{"location":"#notations-and-terminology","title":"Notations and Terminology","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119.</p> <p>This document SHALL adhere to the Notational Conventions and Terminology described in the the CloudEvents v1.0.1 Spec.</p>"},{"location":"#versioning","title":"Versioning","text":"<p>This specification is versioned using git tag. It uses go-semantic-release for tagging new versions following the Conventional Commits v1.0.0 specification.</p>"},{"location":"#type-system","title":"Type System","text":"<p>This specification defines types from the CloudEvents Type System.</p> <ul> <li><code>URI</code> - Absolute uniform resource identifier.</li> <li>String encoding: <code>Absolute URI</code> as defined in     RFC 3986 Section 4.3.</li> <li><code>URI-reference</code> - Uniform resource identifier reference.</li> <li>String encoding: <code>URI-reference</code> as defined in     RFC 3986 Section 4.1.</li> </ul>"},{"location":"#attribute-naming-convention","title":"Attribute Naming Convention","text":"<p>All attributes MUST follow the CloudEvents Naming Convention.</p> <p>Any extension attribute defined by this spec SHALL be prefixed with the string <code>rabe</code> to reduce the chances of name collisions with extension attributes external to RaBe.</p>"},{"location":"#required-attributes","title":"REQUIRED Attributes","text":"<p>The following attributes MUST follow these constaints in addition to the CloudEvents REQUIRED Attributes.</p>"},{"location":"#source","title":"source","text":"<ul> <li>Type: <code>URI-reference</code></li> <li>Description: Identifies the context in which an event happened. Often this   will include information such as the type of the event source, the   organization publishing the event or the process that produced the event. The   exact syntax and semantics behind the data encoded in the URI is defined by   the event producer.</li> </ul> <p>An application SHOULD use the RECOMMENDED unique, internet-wide, absolute URI   format.</p> <p>It is RECOMMENDED to use the GitHub page of the project as <code>source</code>.</p> <p>An application MAY assign a unique <code>source</code> to each distinct producer by appending   a fragment to the URI. It is RECOMMENDED that the unique part is based on a UUID to   aid with tracing efforts or similar requirements.</p> <p>An application MAY use UUID, URN or application-specific schemes to create   unique <code>source</code> identifiers but this is NOT RECOMMENDED.</p> <ul> <li>Constraints:</li> <li>SHOULD be a based on the event producers project page.</li> <li>Examples</li> <li><code>https://github.com/radiorabe/rabemimimi</code></li> <li><code>https://github.com/LibreTime/libretime#&lt;event-id-for-tracing&gt;</code></li> <li><code>https://github.com/radiorabe/raar_show_descriptor</code></li> </ul>"},{"location":"#type","title":"type","text":"<ul> <li>Type: <code>String</code></li> <li>Description: This attribute contains a value describing the type of event   related to the originating occurrence. Often this attribute is used for   routing, observability, policy enforcement, etc. The format of this is   producer defined and might include information such as the version of the   <code>type</code> - see   Versioning of CloudEvents in the Primer   for more information.</li> </ul> <p>The RaBe DNS authority <code>events.api.rabe.ch</code> SHALL be used for reverse-DNS   naming purposes.</p> <p>An event producer MAY use a subdomain indicate which component an event   originated from. Types SHOULD contain versioning information. They MAY   take the RaBe CloudEvents Event Type Registry   into account and are strongly encouraged to do so.</p> <ul> <li>Constraints:</li> <li>SHOULD be prefixed with a reverse-DNS name.</li> <li>if used, the reverse-DNS name SHALL be <code>ch.rabe.api.events</code></li> <li>Examples</li> <li>Such event, much type, very version:<ul> <li>ch.rabe.api.events.rabemimimi.v1alpha.mimimi.created</li> <li>ch.rabe.api.events.rabemimimi.v1alpha.mimimi.updated</li> </ul> </li> <li>Simple unversioned events:<ul> <li>ch.rabe.api.events.libretime.onair</li> </ul> </li> </ul>"},{"location":"#example","title":"Example","text":"<p>The following example shows a paired down RaBe CloudEvent serialized as JSON:</p> <pre><code>{\n\"type\" : \"ch.rabe.api.events.events-spec.v1.such.event\",\n\"source\" : \"https://github.com/radiorabe/events-spec\"\n}\n</code></pre>"},{"location":"#event-type-registry","title":"Event Type Registry","text":"<p>This event type registry is non-normative. It SHOULD be taken into consideration when creating new events but it MUST NOT be considered as the authority on RaBe CloudEvents event types. Please register new event types as necessary.</p>"},{"location":"#chrabeapieventstrackv1trackstarted","title":"<code>ch.rabe.api.events.track.v1.trackStarted</code>","text":"<p>This event SHOULD be emitted by audio players. Subscribers MAY use it for a wide range of purposes, nowplaying might use it for updating the current track from Klangbecken, but it could also trigger other workflows depending on the source of the track.</p> <p>The <code>data</code> field  MUST contain <code>item.artist</code> and <code>item.title</code>. It SHOULD contain <code>item.length</code> which MAY be used to generate internal <code>ch.rabe.api.events.track.v1.trackFinished</code> events in case it misses the event from the player or none gets sent. The <code>data</code> field MAY contain additional fields based on <code>nowplaypadgen.dlplus.CONTENT_TYPES</code>. </p> <p>Example: <pre><code>{\n\"specversion\": \"1.0\",\n\"type\": \"ch.rabe.api.events.track.v1.trackStarted\",\n\"source\": \"https://github.com/radiorabe/klangbecken\",\n\"id\": \"&lt;id&gt;\",\n\"time\": \"2021-12-28T19:31:00Z\",\n\"datacontenttype\": \"application/json\",\n\"data\": {\n\"item.artist\": \"hairmare fusion sounds collective\",\n\"item.title\": \"C L O U D E V E N T W A V E\",\n\"item.length\": 36000\n}\n}\n</code></pre></p>"},{"location":"#license","title":"License","text":"<p>This specification is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2021 Radio Bern RaBe</p>"}]}